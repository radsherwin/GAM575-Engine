// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protoData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protoData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "meshData.pb.h"
#include "textureData.pb.h"
#include "animData.pb.h"
#include "fontData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protoData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protoData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class protoData_proto;
struct protoData_protoDefaultTypeInternal;
extern protoData_protoDefaultTypeInternal _protoData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::protoData_proto* Arena::CreateMaybeMessage<::protoData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class protoData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protoData_proto) */ {
 public:
  inline protoData_proto() : protoData_proto(nullptr) {}
  ~protoData_proto() override;
  explicit constexpr protoData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  protoData_proto(const protoData_proto& from);
  protoData_proto(protoData_proto&& from) noexcept
    : protoData_proto() {
    *this = ::std::move(from);
  }

  inline protoData_proto& operator=(const protoData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline protoData_proto& operator=(protoData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const protoData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const protoData_proto* internal_default_instance() {
    return reinterpret_cast<const protoData_proto*>(
               &_protoData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(protoData_proto& a, protoData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(protoData_proto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(protoData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline protoData_proto* New() const final {
    return new protoData_proto();
  }

  protoData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<protoData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const protoData_proto& from);
  void MergeFrom(const protoData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(protoData_proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoData_proto";
  }
  protected:
  explicit protoData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPMeshDataFieldNumber = 8,
    kPAnimDataFieldNumber = 9,
    kPTextureDataFieldNumber = 10,
    kPFontDataFieldNumber = 11,
    kPVersionFieldNumber = 1,
    kPNameFieldNumber = 2,
    kMeshCountFieldNumber = 3,
    kAnimCountFieldNumber = 4,
    kTextureCountFieldNumber = 5,
    kFontCountFieldNumber = 6,
    kTotalBonesFieldNumber = 7,
  };
  // repeated .meshData_proto pMeshData = 8;
  int pmeshdata_size() const;
  private:
  int _internal_pmeshdata_size() const;
  public:
  void clear_pmeshdata();
  ::meshData_proto* mutable_pmeshdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::meshData_proto >*
      mutable_pmeshdata();
  private:
  const ::meshData_proto& _internal_pmeshdata(int index) const;
  ::meshData_proto* _internal_add_pmeshdata();
  public:
  const ::meshData_proto& pmeshdata(int index) const;
  ::meshData_proto* add_pmeshdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::meshData_proto >&
      pmeshdata() const;

  // repeated .animData_proto pAnimData = 9;
  int panimdata_size() const;
  private:
  int _internal_panimdata_size() const;
  public:
  void clear_panimdata();
  ::animData_proto* mutable_panimdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::animData_proto >*
      mutable_panimdata();
  private:
  const ::animData_proto& _internal_panimdata(int index) const;
  ::animData_proto* _internal_add_panimdata();
  public:
  const ::animData_proto& panimdata(int index) const;
  ::animData_proto* add_panimdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::animData_proto >&
      panimdata() const;

  // repeated .textureData_proto pTextureData = 10;
  int ptexturedata_size() const;
  private:
  int _internal_ptexturedata_size() const;
  public:
  void clear_ptexturedata();
  ::textureData_proto* mutable_ptexturedata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textureData_proto >*
      mutable_ptexturedata();
  private:
  const ::textureData_proto& _internal_ptexturedata(int index) const;
  ::textureData_proto* _internal_add_ptexturedata();
  public:
  const ::textureData_proto& ptexturedata(int index) const;
  ::textureData_proto* add_ptexturedata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textureData_proto >&
      ptexturedata() const;

  // repeated .fontData_proto pFontData = 11;
  int pfontdata_size() const;
  private:
  int _internal_pfontdata_size() const;
  public:
  void clear_pfontdata();
  ::fontData_proto* mutable_pfontdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fontData_proto >*
      mutable_pfontdata();
  private:
  const ::fontData_proto& _internal_pfontdata(int index) const;
  ::fontData_proto* _internal_add_pfontdata();
  public:
  const ::fontData_proto& pfontdata(int index) const;
  ::fontData_proto* add_pfontdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fontData_proto >&
      pfontdata() const;

  // bytes pVersion = 1;
  void clear_pversion();
  const std::string& pversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pversion();
  PROTOBUF_MUST_USE_RESULT std::string* release_pversion();
  void set_allocated_pversion(std::string* pversion);
  private:
  const std::string& _internal_pversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pversion(const std::string& value);
  std::string* _internal_mutable_pversion();
  public:

  // bytes pName = 2;
  void clear_pname();
  const std::string& pname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pname();
  PROTOBUF_MUST_USE_RESULT std::string* release_pname();
  void set_allocated_pname(std::string* pname);
  private:
  const std::string& _internal_pname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pname(const std::string& value);
  std::string* _internal_mutable_pname();
  public:

  // uint32 meshCount = 3;
  void clear_meshcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 meshcount() const;
  void set_meshcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_meshcount() const;
  void _internal_set_meshcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 animCount = 4;
  void clear_animcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 animcount() const;
  void set_animcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_animcount() const;
  void _internal_set_animcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 textureCount = 5;
  void clear_texturecount();
  ::PROTOBUF_NAMESPACE_ID::uint32 texturecount() const;
  void set_texturecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_texturecount() const;
  void _internal_set_texturecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fontCount = 6;
  void clear_fontcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 fontcount() const;
  void set_fontcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fontcount() const;
  void _internal_set_fontcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 totalBones = 7;
  void clear_totalbones();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalbones() const;
  void set_totalbones(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_totalbones() const;
  void _internal_set_totalbones(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protoData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::meshData_proto > pmeshdata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::animData_proto > panimdata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textureData_proto > ptexturedata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fontData_proto > pfontdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meshcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 animcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 texturecount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fontcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalbones_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// protoData_proto

// bytes pVersion = 1;
inline void protoData_proto::clear_pversion() {
  pversion_.ClearToEmpty();
}
inline const std::string& protoData_proto::pversion() const {
  // @@protoc_insertion_point(field_get:protoData_proto.pVersion)
  return _internal_pversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void protoData_proto::set_pversion(ArgT0&& arg0, ArgT... args) {
 
 pversion_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoData_proto.pVersion)
}
inline std::string* protoData_proto::mutable_pversion() {
  std::string* _s = _internal_mutable_pversion();
  // @@protoc_insertion_point(field_mutable:protoData_proto.pVersion)
  return _s;
}
inline const std::string& protoData_proto::_internal_pversion() const {
  return pversion_.Get();
}
inline void protoData_proto::_internal_set_pversion(const std::string& value) {
  
  pversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* protoData_proto::_internal_mutable_pversion() {
  
  return pversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* protoData_proto::release_pversion() {
  // @@protoc_insertion_point(field_release:protoData_proto.pVersion)
  return pversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void protoData_proto::set_allocated_pversion(std::string* pversion) {
  if (pversion != nullptr) {
    
  } else {
    
  }
  pversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pversion,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protoData_proto.pVersion)
}

// bytes pName = 2;
inline void protoData_proto::clear_pname() {
  pname_.ClearToEmpty();
}
inline const std::string& protoData_proto::pname() const {
  // @@protoc_insertion_point(field_get:protoData_proto.pName)
  return _internal_pname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void protoData_proto::set_pname(ArgT0&& arg0, ArgT... args) {
 
 pname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoData_proto.pName)
}
inline std::string* protoData_proto::mutable_pname() {
  std::string* _s = _internal_mutable_pname();
  // @@protoc_insertion_point(field_mutable:protoData_proto.pName)
  return _s;
}
inline const std::string& protoData_proto::_internal_pname() const {
  return pname_.Get();
}
inline void protoData_proto::_internal_set_pname(const std::string& value) {
  
  pname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* protoData_proto::_internal_mutable_pname() {
  
  return pname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* protoData_proto::release_pname() {
  // @@protoc_insertion_point(field_release:protoData_proto.pName)
  return pname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void protoData_proto::set_allocated_pname(std::string* pname) {
  if (pname != nullptr) {
    
  } else {
    
  }
  pname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protoData_proto.pName)
}

// uint32 meshCount = 3;
inline void protoData_proto::clear_meshcount() {
  meshcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 protoData_proto::_internal_meshcount() const {
  return meshcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 protoData_proto::meshcount() const {
  // @@protoc_insertion_point(field_get:protoData_proto.meshCount)
  return _internal_meshcount();
}
inline void protoData_proto::_internal_set_meshcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  meshcount_ = value;
}
inline void protoData_proto::set_meshcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_meshcount(value);
  // @@protoc_insertion_point(field_set:protoData_proto.meshCount)
}

// uint32 animCount = 4;
inline void protoData_proto::clear_animcount() {
  animcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 protoData_proto::_internal_animcount() const {
  return animcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 protoData_proto::animcount() const {
  // @@protoc_insertion_point(field_get:protoData_proto.animCount)
  return _internal_animcount();
}
inline void protoData_proto::_internal_set_animcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  animcount_ = value;
}
inline void protoData_proto::set_animcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_animcount(value);
  // @@protoc_insertion_point(field_set:protoData_proto.animCount)
}

// uint32 textureCount = 5;
inline void protoData_proto::clear_texturecount() {
  texturecount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 protoData_proto::_internal_texturecount() const {
  return texturecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 protoData_proto::texturecount() const {
  // @@protoc_insertion_point(field_get:protoData_proto.textureCount)
  return _internal_texturecount();
}
inline void protoData_proto::_internal_set_texturecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  texturecount_ = value;
}
inline void protoData_proto::set_texturecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_texturecount(value);
  // @@protoc_insertion_point(field_set:protoData_proto.textureCount)
}

// uint32 fontCount = 6;
inline void protoData_proto::clear_fontcount() {
  fontcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 protoData_proto::_internal_fontcount() const {
  return fontcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 protoData_proto::fontcount() const {
  // @@protoc_insertion_point(field_get:protoData_proto.fontCount)
  return _internal_fontcount();
}
inline void protoData_proto::_internal_set_fontcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fontcount_ = value;
}
inline void protoData_proto::set_fontcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fontcount(value);
  // @@protoc_insertion_point(field_set:protoData_proto.fontCount)
}

// uint32 totalBones = 7;
inline void protoData_proto::clear_totalbones() {
  totalbones_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 protoData_proto::_internal_totalbones() const {
  return totalbones_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 protoData_proto::totalbones() const {
  // @@protoc_insertion_point(field_get:protoData_proto.totalBones)
  return _internal_totalbones();
}
inline void protoData_proto::_internal_set_totalbones(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  totalbones_ = value;
}
inline void protoData_proto::set_totalbones(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_totalbones(value);
  // @@protoc_insertion_point(field_set:protoData_proto.totalBones)
}

// repeated .meshData_proto pMeshData = 8;
inline int protoData_proto::_internal_pmeshdata_size() const {
  return pmeshdata_.size();
}
inline int protoData_proto::pmeshdata_size() const {
  return _internal_pmeshdata_size();
}
inline ::meshData_proto* protoData_proto::mutable_pmeshdata(int index) {
  // @@protoc_insertion_point(field_mutable:protoData_proto.pMeshData)
  return pmeshdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::meshData_proto >*
protoData_proto::mutable_pmeshdata() {
  // @@protoc_insertion_point(field_mutable_list:protoData_proto.pMeshData)
  return &pmeshdata_;
}
inline const ::meshData_proto& protoData_proto::_internal_pmeshdata(int index) const {
  return pmeshdata_.Get(index);
}
inline const ::meshData_proto& protoData_proto::pmeshdata(int index) const {
  // @@protoc_insertion_point(field_get:protoData_proto.pMeshData)
  return _internal_pmeshdata(index);
}
inline ::meshData_proto* protoData_proto::_internal_add_pmeshdata() {
  return pmeshdata_.Add();
}
inline ::meshData_proto* protoData_proto::add_pmeshdata() {
  ::meshData_proto* _add = _internal_add_pmeshdata();
  // @@protoc_insertion_point(field_add:protoData_proto.pMeshData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::meshData_proto >&
protoData_proto::pmeshdata() const {
  // @@protoc_insertion_point(field_list:protoData_proto.pMeshData)
  return pmeshdata_;
}

// repeated .animData_proto pAnimData = 9;
inline int protoData_proto::_internal_panimdata_size() const {
  return panimdata_.size();
}
inline int protoData_proto::panimdata_size() const {
  return _internal_panimdata_size();
}
inline ::animData_proto* protoData_proto::mutable_panimdata(int index) {
  // @@protoc_insertion_point(field_mutable:protoData_proto.pAnimData)
  return panimdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::animData_proto >*
protoData_proto::mutable_panimdata() {
  // @@protoc_insertion_point(field_mutable_list:protoData_proto.pAnimData)
  return &panimdata_;
}
inline const ::animData_proto& protoData_proto::_internal_panimdata(int index) const {
  return panimdata_.Get(index);
}
inline const ::animData_proto& protoData_proto::panimdata(int index) const {
  // @@protoc_insertion_point(field_get:protoData_proto.pAnimData)
  return _internal_panimdata(index);
}
inline ::animData_proto* protoData_proto::_internal_add_panimdata() {
  return panimdata_.Add();
}
inline ::animData_proto* protoData_proto::add_panimdata() {
  ::animData_proto* _add = _internal_add_panimdata();
  // @@protoc_insertion_point(field_add:protoData_proto.pAnimData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::animData_proto >&
protoData_proto::panimdata() const {
  // @@protoc_insertion_point(field_list:protoData_proto.pAnimData)
  return panimdata_;
}

// repeated .textureData_proto pTextureData = 10;
inline int protoData_proto::_internal_ptexturedata_size() const {
  return ptexturedata_.size();
}
inline int protoData_proto::ptexturedata_size() const {
  return _internal_ptexturedata_size();
}
inline ::textureData_proto* protoData_proto::mutable_ptexturedata(int index) {
  // @@protoc_insertion_point(field_mutable:protoData_proto.pTextureData)
  return ptexturedata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textureData_proto >*
protoData_proto::mutable_ptexturedata() {
  // @@protoc_insertion_point(field_mutable_list:protoData_proto.pTextureData)
  return &ptexturedata_;
}
inline const ::textureData_proto& protoData_proto::_internal_ptexturedata(int index) const {
  return ptexturedata_.Get(index);
}
inline const ::textureData_proto& protoData_proto::ptexturedata(int index) const {
  // @@protoc_insertion_point(field_get:protoData_proto.pTextureData)
  return _internal_ptexturedata(index);
}
inline ::textureData_proto* protoData_proto::_internal_add_ptexturedata() {
  return ptexturedata_.Add();
}
inline ::textureData_proto* protoData_proto::add_ptexturedata() {
  ::textureData_proto* _add = _internal_add_ptexturedata();
  // @@protoc_insertion_point(field_add:protoData_proto.pTextureData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textureData_proto >&
protoData_proto::ptexturedata() const {
  // @@protoc_insertion_point(field_list:protoData_proto.pTextureData)
  return ptexturedata_;
}

// repeated .fontData_proto pFontData = 11;
inline int protoData_proto::_internal_pfontdata_size() const {
  return pfontdata_.size();
}
inline int protoData_proto::pfontdata_size() const {
  return _internal_pfontdata_size();
}
inline ::fontData_proto* protoData_proto::mutable_pfontdata(int index) {
  // @@protoc_insertion_point(field_mutable:protoData_proto.pFontData)
  return pfontdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fontData_proto >*
protoData_proto::mutable_pfontdata() {
  // @@protoc_insertion_point(field_mutable_list:protoData_proto.pFontData)
  return &pfontdata_;
}
inline const ::fontData_proto& protoData_proto::_internal_pfontdata(int index) const {
  return pfontdata_.Get(index);
}
inline const ::fontData_proto& protoData_proto::pfontdata(int index) const {
  // @@protoc_insertion_point(field_get:protoData_proto.pFontData)
  return _internal_pfontdata(index);
}
inline ::fontData_proto* protoData_proto::_internal_add_pfontdata() {
  return pfontdata_.Add();
}
inline ::fontData_proto* protoData_proto::add_pfontdata() {
  ::fontData_proto* _add = _internal_add_pfontdata();
  // @@protoc_insertion_point(field_add:protoData_proto.pFontData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fontData_proto >&
protoData_proto::pfontdata() const {
  // @@protoc_insertion_point(field_list:protoData_proto.pFontData)
  return pfontdata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protoData_2eproto
