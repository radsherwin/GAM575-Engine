// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vboData.proto

#include "vboData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr vboData_proto::vboData_proto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : podata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enabled_(false)
  , targettype_(0)

  , componenttype_(0)

  , vbotype_(0)

  , attribindex_(0u)
  , count_(0u)
  , datasize_(0u){}
struct vboData_protoDefaultTypeInternal {
  constexpr vboData_protoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~vboData_protoDefaultTypeInternal() {}
  union {
    vboData_proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT vboData_protoDefaultTypeInternal _vboData_proto_default_instance_;
bool vboData_proto_VBO_TARGET_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> vboData_proto_VBO_TARGET_strings[2] = {};

static const char vboData_proto_VBO_TARGET_names[] =
  "ARRAY_BUFFER"
  "ELEMENT_ARRAY_BUFFER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry vboData_proto_VBO_TARGET_entries[] = {
  { {vboData_proto_VBO_TARGET_names + 0, 12}, 0 },
  { {vboData_proto_VBO_TARGET_names + 12, 20}, 1 },
};

static const int vboData_proto_VBO_TARGET_entries_by_number[] = {
  0, // 0 -> ARRAY_BUFFER
  1, // 1 -> ELEMENT_ARRAY_BUFFER
};

const std::string& vboData_proto_VBO_TARGET_Name(
    vboData_proto_VBO_TARGET value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          vboData_proto_VBO_TARGET_entries,
          vboData_proto_VBO_TARGET_entries_by_number,
          2, vboData_proto_VBO_TARGET_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      vboData_proto_VBO_TARGET_entries,
      vboData_proto_VBO_TARGET_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     vboData_proto_VBO_TARGET_strings[idx].get();
}
bool vboData_proto_VBO_TARGET_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vboData_proto_VBO_TARGET* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      vboData_proto_VBO_TARGET_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<vboData_proto_VBO_TARGET>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr vboData_proto_VBO_TARGET vboData_proto::ARRAY_BUFFER;
constexpr vboData_proto_VBO_TARGET vboData_proto::ELEMENT_ARRAY_BUFFER;
constexpr vboData_proto_VBO_TARGET vboData_proto::VBO_TARGET_MIN;
constexpr vboData_proto_VBO_TARGET vboData_proto::VBO_TARGET_MAX;
constexpr int vboData_proto::VBO_TARGET_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool vboData_proto_VBO_COMPONENT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> vboData_proto_VBO_COMPONENT_strings[8] = {};

static const char vboData_proto_VBO_COMPONENT_names[] =
  "BYTE"
  "DOUBLE"
  "FLOAT"
  "INT"
  "SHORT"
  "UNSIGNED_BYTE"
  "UNSIGNED_INT"
  "UNSIGNED_SHORT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry vboData_proto_VBO_COMPONENT_entries[] = {
  { {vboData_proto_VBO_COMPONENT_names + 0, 4}, 0 },
  { {vboData_proto_VBO_COMPONENT_names + 4, 6}, 7 },
  { {vboData_proto_VBO_COMPONENT_names + 10, 5}, 6 },
  { {vboData_proto_VBO_COMPONENT_names + 15, 3}, 4 },
  { {vboData_proto_VBO_COMPONENT_names + 18, 5}, 2 },
  { {vboData_proto_VBO_COMPONENT_names + 23, 13}, 1 },
  { {vboData_proto_VBO_COMPONENT_names + 36, 12}, 5 },
  { {vboData_proto_VBO_COMPONENT_names + 48, 14}, 3 },
};

static const int vboData_proto_VBO_COMPONENT_entries_by_number[] = {
  0, // 0 -> BYTE
  5, // 1 -> UNSIGNED_BYTE
  4, // 2 -> SHORT
  7, // 3 -> UNSIGNED_SHORT
  3, // 4 -> INT
  6, // 5 -> UNSIGNED_INT
  2, // 6 -> FLOAT
  1, // 7 -> DOUBLE
};

const std::string& vboData_proto_VBO_COMPONENT_Name(
    vboData_proto_VBO_COMPONENT value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          vboData_proto_VBO_COMPONENT_entries,
          vboData_proto_VBO_COMPONENT_entries_by_number,
          8, vboData_proto_VBO_COMPONENT_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      vboData_proto_VBO_COMPONENT_entries,
      vboData_proto_VBO_COMPONENT_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     vboData_proto_VBO_COMPONENT_strings[idx].get();
}
bool vboData_proto_VBO_COMPONENT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vboData_proto_VBO_COMPONENT* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      vboData_proto_VBO_COMPONENT_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<vboData_proto_VBO_COMPONENT>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr vboData_proto_VBO_COMPONENT vboData_proto::BYTE;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::UNSIGNED_BYTE;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::SHORT;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::UNSIGNED_SHORT;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::INT;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::UNSIGNED_INT;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::FLOAT;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::DOUBLE;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::VBO_COMPONENT_MIN;
constexpr vboData_proto_VBO_COMPONENT vboData_proto::VBO_COMPONENT_MAX;
constexpr int vboData_proto::VBO_COMPONENT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool vboData_proto_VBO_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> vboData_proto_VBO_TYPE_strings[9] = {};

static const char vboData_proto_VBO_TYPE_names[] =
  "MAT2"
  "MAT3"
  "MAT4"
  "MATRIX"
  "SCALAR"
  "VEC2"
  "VEC3"
  "VEC4"
  "VECTOR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry vboData_proto_VBO_TYPE_entries[] = {
  { {vboData_proto_VBO_TYPE_names + 0, 4}, 3 },
  { {vboData_proto_VBO_TYPE_names + 4, 4}, 4 },
  { {vboData_proto_VBO_TYPE_names + 8, 4}, 5 },
  { {vboData_proto_VBO_TYPE_names + 12, 6}, 8 },
  { {vboData_proto_VBO_TYPE_names + 18, 6}, 6 },
  { {vboData_proto_VBO_TYPE_names + 24, 4}, 0 },
  { {vboData_proto_VBO_TYPE_names + 28, 4}, 1 },
  { {vboData_proto_VBO_TYPE_names + 32, 4}, 2 },
  { {vboData_proto_VBO_TYPE_names + 36, 6}, 7 },
};

static const int vboData_proto_VBO_TYPE_entries_by_number[] = {
  5, // 0 -> VEC2
  6, // 1 -> VEC3
  7, // 2 -> VEC4
  0, // 3 -> MAT2
  1, // 4 -> MAT3
  2, // 5 -> MAT4
  4, // 6 -> SCALAR
  8, // 7 -> VECTOR
  3, // 8 -> MATRIX
};

const std::string& vboData_proto_VBO_TYPE_Name(
    vboData_proto_VBO_TYPE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          vboData_proto_VBO_TYPE_entries,
          vboData_proto_VBO_TYPE_entries_by_number,
          9, vboData_proto_VBO_TYPE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      vboData_proto_VBO_TYPE_entries,
      vboData_proto_VBO_TYPE_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     vboData_proto_VBO_TYPE_strings[idx].get();
}
bool vboData_proto_VBO_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vboData_proto_VBO_TYPE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      vboData_proto_VBO_TYPE_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<vboData_proto_VBO_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr vboData_proto_VBO_TYPE vboData_proto::VEC2;
constexpr vboData_proto_VBO_TYPE vboData_proto::VEC3;
constexpr vboData_proto_VBO_TYPE vboData_proto::VEC4;
constexpr vboData_proto_VBO_TYPE vboData_proto::MAT2;
constexpr vboData_proto_VBO_TYPE vboData_proto::MAT3;
constexpr vboData_proto_VBO_TYPE vboData_proto::MAT4;
constexpr vboData_proto_VBO_TYPE vboData_proto::SCALAR;
constexpr vboData_proto_VBO_TYPE vboData_proto::VECTOR;
constexpr vboData_proto_VBO_TYPE vboData_proto::MATRIX;
constexpr vboData_proto_VBO_TYPE vboData_proto::VBO_TYPE_MIN;
constexpr vboData_proto_VBO_TYPE vboData_proto::VBO_TYPE_MAX;
constexpr int vboData_proto::VBO_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class vboData_proto::_Internal {
 public:
};

vboData_proto::vboData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vboData_proto)
}
vboData_proto::vboData_proto(const vboData_proto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  podata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_podata().empty()) {
    podata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_podata(), 
      GetArenaForAllocation());
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&datasize_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(datasize_));
  // @@protoc_insertion_point(copy_constructor:vboData_proto)
}

inline void vboData_proto::SharedCtor() {
podata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&datasize_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(datasize_));
}

vboData_proto::~vboData_proto() {
  // @@protoc_insertion_point(destructor:vboData_proto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void vboData_proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  podata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void vboData_proto::ArenaDtor(void* object) {
  vboData_proto* _this = reinterpret_cast< vboData_proto* >(object);
  (void)_this;
}
void vboData_proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void vboData_proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void vboData_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:vboData_proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  podata_.ClearToEmpty();
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datasize_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(datasize_));
  _internal_metadata_.Clear<std::string>();
}

const char* vboData_proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vboData_proto.VBO_TARGET targetType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_targettype(static_cast<::vboData_proto_VBO_TARGET>(val));
        } else goto handle_unusual;
        continue;
      // .vboData_proto.VBO_COMPONENT componentType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_componenttype(static_cast<::vboData_proto_VBO_COMPONENT>(val));
        } else goto handle_unusual;
        continue;
      // .vboData_proto.VBO_TYPE vboType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vbotype(static_cast<::vboData_proto_VBO_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // uint32 attribIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          attribindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dataSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes poData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_podata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vboData_proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vboData_proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // .vboData_proto.VBO_TARGET targetType = 2;
  if (this->_internal_targettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_targettype(), target);
  }

  // .vboData_proto.VBO_COMPONENT componentType = 3;
  if (this->_internal_componenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_componenttype(), target);
  }

  // .vboData_proto.VBO_TYPE vboType = 4;
  if (this->_internal_vbotype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_vbotype(), target);
  }

  // uint32 attribIndex = 5;
  if (this->_internal_attribindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_attribindex(), target);
  }

  // uint32 count = 6;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  // uint32 dataSize = 7;
  if (this->_internal_datasize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_datasize(), target);
  }

  // bytes poData = 8;
  if (!this->_internal_podata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_podata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vboData_proto)
  return target;
}

size_t vboData_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vboData_proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes poData = 8;
  if (!this->_internal_podata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_podata());
  }

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // .vboData_proto.VBO_TARGET targetType = 2;
  if (this->_internal_targettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_targettype());
  }

  // .vboData_proto.VBO_COMPONENT componentType = 3;
  if (this->_internal_componenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_componenttype());
  }

  // .vboData_proto.VBO_TYPE vboType = 4;
  if (this->_internal_vbotype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vbotype());
  }

  // uint32 attribIndex = 5;
  if (this->_internal_attribindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribindex());
  }

  // uint32 count = 6;
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  // uint32 dataSize = 7;
  if (this->_internal_datasize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_datasize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vboData_proto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const vboData_proto*>(
      &from));
}

void vboData_proto::MergeFrom(const vboData_proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vboData_proto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_podata().empty()) {
    _internal_set_podata(from._internal_podata());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_targettype() != 0) {
    _internal_set_targettype(from._internal_targettype());
  }
  if (from._internal_componenttype() != 0) {
    _internal_set_componenttype(from._internal_componenttype());
  }
  if (from._internal_vbotype() != 0) {
    _internal_set_vbotype(from._internal_vbotype());
  }
  if (from._internal_attribindex() != 0) {
    _internal_set_attribindex(from._internal_attribindex());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from._internal_datasize() != 0) {
    _internal_set_datasize(from._internal_datasize());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void vboData_proto::CopyFrom(const vboData_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vboData_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vboData_proto::IsInitialized() const {
  return true;
}

void vboData_proto::InternalSwap(vboData_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &podata_, GetArenaForAllocation(),
      &other->podata_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(vboData_proto, datasize_)
      + sizeof(vboData_proto::datasize_)
      - PROTOBUF_FIELD_OFFSET(vboData_proto, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

std::string vboData_proto::GetTypeName() const {
  return "vboData_proto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vboData_proto* Arena::CreateMaybeMessage< ::vboData_proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vboData_proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
