// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jointData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_jointData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_jointData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_jointData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_jointData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class jointData_proto;
struct jointData_protoDefaultTypeInternal;
extern jointData_protoDefaultTypeInternal _jointData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::jointData_proto* Arena::CreateMaybeMessage<::jointData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class jointData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:jointData_proto) */ {
 public:
  inline jointData_proto() : jointData_proto(nullptr) {}
  ~jointData_proto() override;
  explicit constexpr jointData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  jointData_proto(const jointData_proto& from);
  jointData_proto(jointData_proto&& from) noexcept
    : jointData_proto() {
    *this = ::std::move(from);
  }

  inline jointData_proto& operator=(const jointData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline jointData_proto& operator=(jointData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const jointData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const jointData_proto* internal_default_instance() {
    return reinterpret_cast<const jointData_proto*>(
               &_jointData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(jointData_proto& a, jointData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(jointData_proto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(jointData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline jointData_proto* New() const final {
    return new jointData_proto();
  }

  jointData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<jointData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const jointData_proto& from);
  void MergeFrom(const jointData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(jointData_proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jointData_proto";
  }
  protected:
  explicit jointData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPNameFieldNumber = 2,
    kEnabledFieldNumber = 1,
    kJointIndexFieldNumber = 3,
    kParentJointIndexFieldNumber = 4,
  };
  // bytes pName = 2;
  void clear_pname();
  const std::string& pname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pname();
  PROTOBUF_MUST_USE_RESULT std::string* release_pname();
  void set_allocated_pname(std::string* pname);
  private:
  const std::string& _internal_pname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pname(const std::string& value);
  std::string* _internal_mutable_pname();
  public:

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // sint32 jointIndex = 3;
  void clear_jointindex();
  ::PROTOBUF_NAMESPACE_ID::int32 jointindex() const;
  void set_jointindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_jointindex() const;
  void _internal_set_jointindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 parentJointIndex = 4;
  void clear_parentjointindex();
  ::PROTOBUF_NAMESPACE_ID::int32 parentjointindex() const;
  void set_parentjointindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parentjointindex() const;
  void _internal_set_parentjointindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:jointData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pname_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 jointindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 parentjointindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jointData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// jointData_proto

// bool enabled = 1;
inline void jointData_proto::clear_enabled() {
  enabled_ = false;
}
inline bool jointData_proto::_internal_enabled() const {
  return enabled_;
}
inline bool jointData_proto::enabled() const {
  // @@protoc_insertion_point(field_get:jointData_proto.enabled)
  return _internal_enabled();
}
inline void jointData_proto::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void jointData_proto::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:jointData_proto.enabled)
}

// bytes pName = 2;
inline void jointData_proto::clear_pname() {
  pname_.ClearToEmpty();
}
inline const std::string& jointData_proto::pname() const {
  // @@protoc_insertion_point(field_get:jointData_proto.pName)
  return _internal_pname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void jointData_proto::set_pname(ArgT0&& arg0, ArgT... args) {
 
 pname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jointData_proto.pName)
}
inline std::string* jointData_proto::mutable_pname() {
  std::string* _s = _internal_mutable_pname();
  // @@protoc_insertion_point(field_mutable:jointData_proto.pName)
  return _s;
}
inline const std::string& jointData_proto::_internal_pname() const {
  return pname_.Get();
}
inline void jointData_proto::_internal_set_pname(const std::string& value) {
  
  pname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* jointData_proto::_internal_mutable_pname() {
  
  return pname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* jointData_proto::release_pname() {
  // @@protoc_insertion_point(field_release:jointData_proto.pName)
  return pname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void jointData_proto::set_allocated_pname(std::string* pname) {
  if (pname != nullptr) {
    
  } else {
    
  }
  pname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:jointData_proto.pName)
}

// sint32 jointIndex = 3;
inline void jointData_proto::clear_jointindex() {
  jointindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 jointData_proto::_internal_jointindex() const {
  return jointindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 jointData_proto::jointindex() const {
  // @@protoc_insertion_point(field_get:jointData_proto.jointIndex)
  return _internal_jointindex();
}
inline void jointData_proto::_internal_set_jointindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  jointindex_ = value;
}
inline void jointData_proto::set_jointindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_jointindex(value);
  // @@protoc_insertion_point(field_set:jointData_proto.jointIndex)
}

// sint32 parentJointIndex = 4;
inline void jointData_proto::clear_parentjointindex() {
  parentjointindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 jointData_proto::_internal_parentjointindex() const {
  return parentjointindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 jointData_proto::parentjointindex() const {
  // @@protoc_insertion_point(field_get:jointData_proto.parentJointIndex)
  return _internal_parentjointindex();
}
inline void jointData_proto::_internal_set_parentjointindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parentjointindex_ = value;
}
inline void jointData_proto::set_parentjointindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parentjointindex(value);
  // @@protoc_insertion_point(field_set:jointData_proto.parentJointIndex)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_jointData_2eproto
