// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animData.proto

#include "animData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr animData_proto::animData_proto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bone_data_()
  , animname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , jointindex_(0)
  , parentindex_(0)
  , totalanimframes_(0u){}
struct animData_protoDefaultTypeInternal {
  constexpr animData_protoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~animData_protoDefaultTypeInternal() {}
  union {
    animData_proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT animData_protoDefaultTypeInternal _animData_proto_default_instance_;

// ===================================================================

class animData_proto::_Internal {
 public:
};

void animData_proto::clear_bone_data() {
  bone_data_.Clear();
}
animData_proto::animData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  bone_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animData_proto)
}
animData_proto::animData_proto(const animData_proto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      bone_data_(from.bone_data_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  animname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_animname().empty()) {
    animname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_animname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&jointindex_, &from.jointindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalanimframes_) -
    reinterpret_cast<char*>(&jointindex_)) + sizeof(totalanimframes_));
  // @@protoc_insertion_point(copy_constructor:animData_proto)
}

inline void animData_proto::SharedCtor() {
animname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&jointindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&totalanimframes_) -
    reinterpret_cast<char*>(&jointindex_)) + sizeof(totalanimframes_));
}

animData_proto::~animData_proto() {
  // @@protoc_insertion_point(destructor:animData_proto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void animData_proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  animname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void animData_proto::ArenaDtor(void* object) {
  animData_proto* _this = reinterpret_cast< animData_proto* >(object);
  (void)_this;
}
void animData_proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void animData_proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void animData_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:animData_proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bone_data_.Clear();
  animname_.ClearToEmpty();
  ::memset(&jointindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalanimframes_) -
      reinterpret_cast<char*>(&jointindex_)) + sizeof(totalanimframes_));
  _internal_metadata_.Clear<std::string>();
}

const char* animData_proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .boneData_proto bone_Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bone_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes animName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_animname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 jointIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          jointindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 parentIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parentindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 totalAnimFrames = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalanimframes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* animData_proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animData_proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .boneData_proto bone_Data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bone_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bone_data(i), target, stream);
  }

  // bytes animName = 2;
  if (!this->_internal_animname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_animname(), target);
  }

  // sint32 jointIndex = 3;
  if (this->_internal_jointindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_jointindex(), target);
  }

  // sint32 parentIndex = 4;
  if (this->_internal_parentindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_parentindex(), target);
  }

  // uint32 totalAnimFrames = 5;
  if (this->_internal_totalanimframes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_totalanimframes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animData_proto)
  return target;
}

size_t animData_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animData_proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .boneData_proto bone_Data = 1;
  total_size += 1UL * this->_internal_bone_data_size();
  for (const auto& msg : this->bone_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes animName = 2;
  if (!this->_internal_animname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_animname());
  }

  // sint32 jointIndex = 3;
  if (this->_internal_jointindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_jointindex());
  }

  // sint32 parentIndex = 4;
  if (this->_internal_parentindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_parentindex());
  }

  // uint32 totalAnimFrames = 5;
  if (this->_internal_totalanimframes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalanimframes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void animData_proto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const animData_proto*>(
      &from));
}

void animData_proto::MergeFrom(const animData_proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animData_proto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bone_data_.MergeFrom(from.bone_data_);
  if (!from._internal_animname().empty()) {
    _internal_set_animname(from._internal_animname());
  }
  if (from._internal_jointindex() != 0) {
    _internal_set_jointindex(from._internal_jointindex());
  }
  if (from._internal_parentindex() != 0) {
    _internal_set_parentindex(from._internal_parentindex());
  }
  if (from._internal_totalanimframes() != 0) {
    _internal_set_totalanimframes(from._internal_totalanimframes());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void animData_proto::CopyFrom(const animData_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animData_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool animData_proto::IsInitialized() const {
  return true;
}

void animData_proto::InternalSwap(animData_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bone_data_.InternalSwap(&other->bone_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &animname_, GetArenaForAllocation(),
      &other->animname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(animData_proto, totalanimframes_)
      + sizeof(animData_proto::totalanimframes_)
      - PROTOBUF_FIELD_OFFSET(animData_proto, jointindex_)>(
          reinterpret_cast<char*>(&jointindex_),
          reinterpret_cast<char*>(&other->jointindex_));
}

std::string animData_proto::GetTypeName() const {
  return "animData_proto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::animData_proto* Arena::CreateMaybeMessage< ::animData_proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animData_proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
