// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoData.proto

#include "protoData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr protoData_proto::protoData_proto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pmeshdata_()
  , panimdata_()
  , ptexturedata_()
  , pfontdata_()
  , pversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , meshcount_(0u)
  , animcount_(0u)
  , texturecount_(0u)
  , fontcount_(0u)
  , totalbones_(0u){}
struct protoData_protoDefaultTypeInternal {
  constexpr protoData_protoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~protoData_protoDefaultTypeInternal() {}
  union {
    protoData_proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT protoData_protoDefaultTypeInternal _protoData_proto_default_instance_;

// ===================================================================

class protoData_proto::_Internal {
 public:
};

void protoData_proto::clear_pmeshdata() {
  pmeshdata_.Clear();
}
void protoData_proto::clear_panimdata() {
  panimdata_.Clear();
}
void protoData_proto::clear_ptexturedata() {
  ptexturedata_.Clear();
}
void protoData_proto::clear_pfontdata() {
  pfontdata_.Clear();
}
protoData_proto::protoData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  pmeshdata_(arena),
  panimdata_(arena),
  ptexturedata_(arena),
  pfontdata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoData_proto)
}
protoData_proto::protoData_proto(const protoData_proto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      pmeshdata_(from.pmeshdata_),
      panimdata_(from.panimdata_),
      ptexturedata_(from.ptexturedata_),
      pfontdata_(from.pfontdata_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  pversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pversion().empty()) {
    pversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pversion(), 
      GetArenaForAllocation());
  }
  pname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pname().empty()) {
    pname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&meshcount_, &from.meshcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalbones_) -
    reinterpret_cast<char*>(&meshcount_)) + sizeof(totalbones_));
  // @@protoc_insertion_point(copy_constructor:protoData_proto)
}

inline void protoData_proto::SharedCtor() {
pversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meshcount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&totalbones_) -
    reinterpret_cast<char*>(&meshcount_)) + sizeof(totalbones_));
}

protoData_proto::~protoData_proto() {
  // @@protoc_insertion_point(destructor:protoData_proto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void protoData_proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void protoData_proto::ArenaDtor(void* object) {
  protoData_proto* _this = reinterpret_cast< protoData_proto* >(object);
  (void)_this;
}
void protoData_proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void protoData_proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void protoData_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:protoData_proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pmeshdata_.Clear();
  panimdata_.Clear();
  ptexturedata_.Clear();
  pfontdata_.Clear();
  pversion_.ClearToEmpty();
  pname_.ClearToEmpty();
  ::memset(&meshcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalbones_) -
      reinterpret_cast<char*>(&meshcount_)) + sizeof(totalbones_));
  _internal_metadata_.Clear<std::string>();
}

const char* protoData_proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 meshCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          meshcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 animCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          animcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 textureCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          texturecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fontCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fontcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 totalBones = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          totalbones_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .meshData_proto pMeshData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pmeshdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .animData_proto pAnimData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_panimdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .textureData_proto pTextureData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ptexturedata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fontData_proto pFontData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pfontdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* protoData_proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoData_proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pVersion = 1;
  if (!this->_internal_pversion().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pversion(), target);
  }

  // bytes pName = 2;
  if (!this->_internal_pname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pname(), target);
  }

  // uint32 meshCount = 3;
  if (this->_internal_meshcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_meshcount(), target);
  }

  // uint32 animCount = 4;
  if (this->_internal_animcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_animcount(), target);
  }

  // uint32 textureCount = 5;
  if (this->_internal_texturecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_texturecount(), target);
  }

  // uint32 fontCount = 6;
  if (this->_internal_fontcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fontcount(), target);
  }

  // uint32 totalBones = 7;
  if (this->_internal_totalbones() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_totalbones(), target);
  }

  // repeated .meshData_proto pMeshData = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pmeshdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_pmeshdata(i), target, stream);
  }

  // repeated .animData_proto pAnimData = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_panimdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_panimdata(i), target, stream);
  }

  // repeated .textureData_proto pTextureData = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ptexturedata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_ptexturedata(i), target, stream);
  }

  // repeated .fontData_proto pFontData = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pfontdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_pfontdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoData_proto)
  return target;
}

size_t protoData_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoData_proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .meshData_proto pMeshData = 8;
  total_size += 1UL * this->_internal_pmeshdata_size();
  for (const auto& msg : this->pmeshdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .animData_proto pAnimData = 9;
  total_size += 1UL * this->_internal_panimdata_size();
  for (const auto& msg : this->panimdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .textureData_proto pTextureData = 10;
  total_size += 1UL * this->_internal_ptexturedata_size();
  for (const auto& msg : this->ptexturedata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fontData_proto pFontData = 11;
  total_size += 1UL * this->_internal_pfontdata_size();
  for (const auto& msg : this->pfontdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes pVersion = 1;
  if (!this->_internal_pversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pversion());
  }

  // bytes pName = 2;
  if (!this->_internal_pname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pname());
  }

  // uint32 meshCount = 3;
  if (this->_internal_meshcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_meshcount());
  }

  // uint32 animCount = 4;
  if (this->_internal_animcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_animcount());
  }

  // uint32 textureCount = 5;
  if (this->_internal_texturecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_texturecount());
  }

  // uint32 fontCount = 6;
  if (this->_internal_fontcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fontcount());
  }

  // uint32 totalBones = 7;
  if (this->_internal_totalbones() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalbones());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void protoData_proto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const protoData_proto*>(
      &from));
}

void protoData_proto::MergeFrom(const protoData_proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoData_proto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pmeshdata_.MergeFrom(from.pmeshdata_);
  panimdata_.MergeFrom(from.panimdata_);
  ptexturedata_.MergeFrom(from.ptexturedata_);
  pfontdata_.MergeFrom(from.pfontdata_);
  if (!from._internal_pversion().empty()) {
    _internal_set_pversion(from._internal_pversion());
  }
  if (!from._internal_pname().empty()) {
    _internal_set_pname(from._internal_pname());
  }
  if (from._internal_meshcount() != 0) {
    _internal_set_meshcount(from._internal_meshcount());
  }
  if (from._internal_animcount() != 0) {
    _internal_set_animcount(from._internal_animcount());
  }
  if (from._internal_texturecount() != 0) {
    _internal_set_texturecount(from._internal_texturecount());
  }
  if (from._internal_fontcount() != 0) {
    _internal_set_fontcount(from._internal_fontcount());
  }
  if (from._internal_totalbones() != 0) {
    _internal_set_totalbones(from._internal_totalbones());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void protoData_proto::CopyFrom(const protoData_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoData_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool protoData_proto::IsInitialized() const {
  return true;
}

void protoData_proto::InternalSwap(protoData_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pmeshdata_.InternalSwap(&other->pmeshdata_);
  panimdata_.InternalSwap(&other->panimdata_);
  ptexturedata_.InternalSwap(&other->ptexturedata_);
  pfontdata_.InternalSwap(&other->pfontdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pversion_, GetArenaForAllocation(),
      &other->pversion_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pname_, GetArenaForAllocation(),
      &other->pname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(protoData_proto, totalbones_)
      + sizeof(protoData_proto::totalbones_)
      - PROTOBUF_FIELD_OFFSET(protoData_proto, meshcount_)>(
          reinterpret_cast<char*>(&meshcount_),
          reinterpret_cast<char*>(&other->meshcount_));
}

std::string protoData_proto::GetTypeName() const {
  return "protoData_proto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protoData_proto* Arena::CreateMaybeMessage< ::protoData_proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoData_proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
